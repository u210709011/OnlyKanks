rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.createdBy == request.auth.uid || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants'])
      );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    match /messages/{messageId} {
      allow read: if request.auth != null && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid ||
         exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
         get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants.hasAny([request.auth.uid]));
      
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      
      allow update: if request.auth != null && 
        resource.data.receiverId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }

    match /chats/{chatId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth != null && 
        resource.data.participants.hasAny([request.auth.uid]);
    }
    
    match /invitations/{invitationId} {
      // Allow users to read invitations they sent or received
      allow read: if request.auth != null &&
        (resource.data.senderId == request.auth.uid || 
         resource.data.recipientId == request.auth.uid);
      
      // Allow users to create invitations where they are the sender
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      
      // Allow users to update invitations addressed to them (to accept/decline)
      allow update: if request.auth != null && 
        resource.data.recipientId == request.auth.uid;
      
      // Allow sender to delete their invitations
      allow delete: if request.auth != null && 
        resource.data.senderId == request.auth.uid;
    }
    
    match /friendRequests/{requestId} {
      // Anyone can read friend requests they sent or received
      allow read: if request.auth != null &&
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      
      // Anyone can create a friend request where they are the sender
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid;
      
      // Only the receiver can update the status (accept/reject)
      allow update: if request.auth != null && 
        resource.data.receiverId == request.auth.uid;
      
      // Only the sender can delete a request (cancel)
      allow delete: if request.auth != null && 
        resource.data.senderId == request.auth.uid;
    }
    
    match /friends/{friendId} {
      // Allow any authenticated user to read friends data 
      // This enables friend counts and friendship checks
      allow read: if request.auth != null;
      
      // Anyone can create a friend relationship involving themselves
      allow create: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || 
         request.resource.data.friendId == request.auth.uid);
      
      // Only the users in the friendship can delete it (unfriend)
      allow delete: if request.auth != null &&
        (resource.data.userId == request.auth.uid || 
         resource.data.friendId == request.auth.uid);
    }
  }
} 