rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Basic read rule for authenticated users
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // User rules
    match /users/{userId} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Events rules
    match /events/{eventId} {
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.createdBy == request.auth.uid || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants'])
      );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Event comments - simple rule
    match /eventComments/{commentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Messages - simple rule
    match /messages/{messageId} {
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow update: if request.auth != null && resource.data.receiverId == request.auth.uid;
    }

    // Chats
    match /chats/{chatId} {
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
    }
    
    // Other collections with basic rules
    match /invitations/{invitationId} {
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid);
    }
    
    match /friendRequests/{requestId} {
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
    }
    
    match /friends/{friendId} {
      allow create: if request.auth != null;
      allow delete: if request.auth != null &&
        (resource.data.userId == request.auth.uid || resource.data.friendId == request.auth.uid);
    }
    
    match /eventPhotos/{photoId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Notifications rules - with support for all notification types
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow update if the user is updating their own notification, specifically the 'read' field
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    // Friend request notifications
    match /friendRequestNotifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && resource.data.recipientId == request.auth.uid;
    }
    
    // Event join request notifications
    match /joinRequestNotifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && resource.data.recipientId == request.auth.uid;
    }
    
    // Event invitation notifications
    match /invitationNotifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && resource.data.recipientId == request.auth.uid;
    }
  }
} 